# Generated by Django 4.2.23 on 2025-07-07 18:41

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('stokvel', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('payment_date', models.DateField()),
                ('payment_method', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('cash', 'Cash'), ('eft', 'EFT'), ('debit_order', 'Debit Order'), ('mobile_payment', 'Mobile Payment'), ('other', 'Other')], max_length=20)),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('bank_reference', models.CharField(blank=True, help_text='Transaction description from bank statement', max_length=200)),
                ('bank_transaction_date', models.DateField(blank=True, null=True)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending Verification'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('reversed', 'Reversed')], default='pending', max_length=15)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('verification_notes', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='accounts.member')),
            ],
            options={
                'verbose_name': 'Contribution',
                'verbose_name_plural': 'Contributions',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='PaymentPeriod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="e.g., 'March 2025', 'Q1 2025'", max_length=100)),
                ('year', models.IntegerField()),
                ('month', models.IntegerField(blank=True, null=True)),
                ('quarter', models.IntegerField(blank=True, null=True)),
                ('period_start_date', models.DateField()),
                ('period_end_date', models.DateField()),
                ('due_date', models.DateField()),
                ('expected_amount_per_member', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('is_open', models.BooleanField(default=True)),
                ('is_finalized', models.BooleanField(default=False)),
                ('auto_generate_penalties', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('contribution_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_periods', to='stokvel.contributionrule')),
                ('stokvel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_periods', to='stokvel.stokvel')),
            ],
            options={
                'verbose_name': 'Payment Period',
                'verbose_name_plural': 'Payment Periods',
                'ordering': ['-year', '-month', '-quarter'],
                'unique_together': {('stokvel', 'contribution_rule', 'year', 'month', 'quarter')},
            },
        ),
        migrations.CreateModel(
            name='Penalty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('penalty_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('reason', models.TextField()),
                ('applied_date', models.DateField()),
                ('status', models.CharField(choices=[('applied', 'Applied'), ('waived', 'Waived'), ('paid', 'Paid'), ('outstanding', 'Outstanding')], default='applied', max_length=15)),
                ('waived_date', models.DateField(blank=True, null=True)),
                ('waived_reason', models.TextField(blank=True)),
                ('paid_date', models.DateField(blank=True, null=True)),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='accounts.member')),
                ('payment_period', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='finances.paymentperiod')),
                ('penalty_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applied_penalties', to='stokvel.penaltyrule')),
                ('waived_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='waived_penalties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Penalty',
                'verbose_name_plural': 'Penalties',
                'ordering': ['-applied_date'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('contribution', 'Member Contribution'), ('penalty_payment', 'Penalty Payment'), ('payout', 'Member Payout'), ('expense', 'Expense'), ('transfer', 'Transfer'), ('interest', 'Interest'), ('fee', 'Bank Fee'), ('adjustment', 'Adjustment')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('description', models.CharField(max_length=200)),
                ('transaction_date', models.DateField()),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('bank_reference', models.CharField(blank=True, max_length=200)),
                ('running_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('notes', models.TextField(blank=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_transactions', to=settings.AUTH_USER_MODEL)),
                ('related_contribution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='finances.contribution')),
                ('related_member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='accounts.member')),
                ('related_penalty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='finances.penalty')),
                ('stokvel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='stokvel.stokvel')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-transaction_date', '-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Payout',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('payout_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('payout_date', models.DateField()),
                ('payout_method', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('cash', 'Cash'), ('cheque', 'Cheque')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('processed', 'Processed'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=15)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('processing_date', models.DateTimeField(blank=True, null=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_payouts', to=settings.AUTH_USER_MODEL)),
                ('bank_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.memberbankaccount')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payouts', to='accounts.member')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_payouts', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_payouts', to=settings.AUTH_USER_MODEL)),
                ('stokvel_cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payouts', to='stokvel.stokvelcycle')),
            ],
            options={
                'verbose_name': 'Payout',
                'verbose_name_plural': 'Payouts',
                'ordering': ['-request_date'],
            },
        ),
        migrations.AddField(
            model_name='contribution',
            name='payment_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='finances.paymentperiod'),
        ),
        migrations.AddField(
            model_name='contribution',
            name='verified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_contributions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='BankStatementImport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_name', models.CharField(max_length=255)),
                ('statement_period_start', models.DateField()),
                ('statement_period_end', models.DateField()),
                ('status', models.CharField(choices=[('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('partially_matched', 'Partially Matched')], default='processing', max_length=20)),
                ('total_transactions_imported', models.IntegerField(default=0)),
                ('matched_contributions', models.IntegerField(default=0)),
                ('unmatched_transactions', models.IntegerField(default=0)),
                ('duplicate_transactions', models.IntegerField(default=0)),
                ('import_date', models.DateTimeField(auto_now_add=True)),
                ('processing_completed_date', models.DateTimeField(blank=True, null=True)),
                ('error_log', models.TextField(blank=True)),
                ('processing_notes', models.TextField(blank=True)),
                ('imported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imports', to=settings.AUTH_USER_MODEL)),
                ('stokvel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statement_imports', to='stokvel.stokvel')),
            ],
            options={
                'verbose_name': 'Bank Statement Import',
                'verbose_name_plural': 'Bank Statement Imports',
                'ordering': ['-import_date'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='contribution',
            unique_together={('member', 'payment_period')},
        ),
    ]
